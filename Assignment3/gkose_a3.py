# -*- coding: utf-8 -*-
"""gkose_a3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14aApwOWlZIIzYd9pa2WVr2U9svErz63o
"""

import sys
import numpy as np
import copy
import time

def initialfunction(Bus,Train,TransferTime,n, Matrix):
  for k in range(n):
    for i in range(n):
      for j in range(n):
        Bus[i][j] = min(Bus[i][j], Train[i][k]+Bus[k][j]+TransferTime[k], Bus[i][k]+Bus[k][j])
        Train[i][j]=min(Train[i][j], Bus[i][k]+Train[k][j]+TransferTime[k], Train[i][k]+Train[k][j])
        Matrix[i][j] = min(Train[i][j],Bus[i][j] )
       
  print(Matrix[0])

def recursiveNaive(Bus, Train, TransferTime, n):
  result = []
  for target in range(n): #we will call functions and they will decide the intermediate nodes
    listOfPossibleIMNodes = [i for i in range(n)]
    bus = byBus(Bus, Train, TransferTime, n, listOfPossibleIMNodes, 0, target)
    train = byTrain(Bus, Train, TransferTime, n, listOfPossibleIMNodes, 0, target)
    result.append(min(bus, train))
  print(result)

def byBus(Bus, Train, TransferTime, n, listOfPossibleIMNodes, initial, target):
  if initial == target:
    return 0
  
  listOfPossibleIMNodes2 = copy.deepcopy(listOfPossibleIMNodes)
  if initial in listOfPossibleIMNodes2:
    listOfPossibleIMNodes2.remove(initial)
  if target in listOfPossibleIMNodes2:
    listOfPossibleIMNodes2.remove(target)
  
  BusI_K = float('inf')
  BusK_J = float('inf')
  trainI_K = float('inf')
  shortestUsingDifferentImCities = []
  for imCity in listOfPossibleIMNodes2: 
    BusI_K = byBus(Bus, Train, TransferTime, n, listOfPossibleIMNodes2, initial, imCity)
    BusK_J = byBus(Bus, Train, TransferTime, n, listOfPossibleIMNodes2, imCity, target)
    trainK_J = byTrain(Bus, Train, TransferTime, n, listOfPossibleIMNodes2, imCity, target)

    minimumUsingThisImCity = min(BusI_K + BusK_J, Bus[initial][target], BusI_K + trainK_J + TransferTime[imCity])
    shortestUsingDifferentImCities.append(minimumUsingThisImCity)

  if len(shortestUsingDifferentImCities) == 0:
    return float("inf")

  value = min(shortestUsingDifferentImCities)
  
  return value
  
def byTrain(Bus, Train, TransferTime, n, listOfPossibleIMNodes, initial, target):
  if initial == target:
    return 0
  
  listOfPossibleIMNodes2 = copy.deepcopy(listOfPossibleIMNodes)
  if initial in listOfPossibleIMNodes2:
    listOfPossibleIMNodes2.remove(initial)
  if target in listOfPossibleIMNodes2:
    listOfPossibleIMNodes2.remove(target)
  
  busI_K = float('inf')
  trainK_J = float('inf')
  trainI_K = float('inf')
  shortestUsingDifferentImCities = []
  for imCity in listOfPossibleIMNodes2:  
    trainI_K = byTrain(Bus, Train, TransferTime, n, listOfPossibleIMNodes2, initial, imCity)
    trainK_J = byTrain(Bus, Train, TransferTime, n, listOfPossibleIMNodes2, imCity, target)
    busK_J = byBus(Bus, Train, TransferTime, n, listOfPossibleIMNodes2, imCity, target)
    minimumUsingThisImCity = min(trainI_K + trainK_J, Train[initial][target], trainI_K + busK_J + TransferTime[imCity])
    shortestUsingDifferentImCities.append(minimumUsingThisImCity)

  if len(shortestUsingDifferentImCities) == 0:
    return float("inf")
  value = min(shortestUsingDifferentImCities)
  return value

MAX=float('inf')

#Input will be in between these two comment lines

Bus=[[0, 6, 3, 9, 18],
     [4, 0, 9, 4, 13],
     [2, 3, 0, 5, 14],
     [7, 3, 6, 0, 16],
     [10,12,16,9, 0]]
Train=[[0,6,11,4,12],
       [5,0,10,5,14],
       [4,8,0,5,11],
       [8,3,4,0,12],
       [17,12,13,15,0]]

TransferTime=[1,1,1,1,1]

#Input will be in between these two comment lines


Matrix = list(map(list, Bus))
start = time.time()

#One of these two functions will be called 

initialfunction(Bus,Train,TransferTime,5, Matrix)
#recursiveNaive(Bus, Train, TransferTime, 5)

end = time.time()
print(end-start)

